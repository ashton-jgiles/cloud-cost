services:
  postgres:
    image: postgres:15-alpine
    container_name: cloud-cost-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - cloud-cost-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../cloud-cost-api
      dockerfile: Dockerfile.dev
    container_name: cloud-cost-api
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASS: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DB}
    ports:
      - "${BACKEND_PORT}:3000"
    volumes:
      - ../cloud-cost-api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cloud-cost-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ../cloud-cost-site
      dockerfile: Dockerfile.dev
    container_name: cloud-cost-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL}
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      - ../cloud-cost-site:/app
      - /app/node_modules
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cloud-cost-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  cloud-cost-network:
    driver: bridge
